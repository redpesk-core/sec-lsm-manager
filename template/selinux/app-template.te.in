include(../macros.in)

###########################################################################
# Copyright (C) 2020-2025 IoT.bzh Company
#
# Author: Arthur Guyader <arthur.guyader@iot.bzh>
#
# $RP_BEGIN_LICENSE$
# Commercial License Usage
#  Licensees holding valid commercial IoT.bzh licenses may use this file in
#  accordance with the commercial license agreement provided with the
#  Software or, alternatively, in accordance with the terms contained in
#  a written agreement between you and The IoT.bzh Company. For licensing terms
#  and conditions see https://www.iot.bzh/terms-conditions. For further
#  information use the contact form at https://www.iot.bzh/contact.
#
# GNU General Public License Usage
#  Alternatively, this file may be used under the terms of the GNU General
#  Public license version 3. This license is as published by the Free Software
#  Foundation and appearing in the file LICENSE.GPLv3 included in the packaging
#  of this file. Please review the following information to ensure the GNU
#  General Public License requirements will be met
#  https://www.gnu.org/licenses/gpl-3.0.html.
# $RP_END_LICENSE$
###########################################################################

policy_module({{id}},1.0)

gen_require(`
    type bin_t;
    type tmp_t;
    type unreserved_port_t;
')

###############
# Definitions #
###############

# Attribute {{id_underscore}}_domain will contain all type
attribute {{id_underscore}}_domain;

type {{id_underscore}}_t;
files_type({{id_underscore}}_t);
typeattribute {{id_underscore}}_t {{id_underscore}}_domain;

type {{id_underscore}}_exec_t;
init_daemon_domain({{id_underscore}}_t, {{id_underscore}}_exec_t);
init_nnp_daemon_domain({{id_underscore}}_t);
domain_entry_file({{id_underscore}}_t, bin_t);
role system_r types {{id_underscore}}_t;
typeattribute {{id_underscore}}_exec_t {{id_underscore}}_domain;

type {{id_underscore}}_lib_t;
files_type({{id_underscore}}_lib_t);
typeattribute {{id_underscore}}_lib_t {{id_underscore}}_domain;

type {{id_underscore}}_conf_t;
files_config_file({{id_underscore}}_conf_t);
typeattribute {{id_underscore}}_conf_t {{id_underscore}}_domain;

type {{id_underscore}}_icon_t;
files_type({{id_underscore}}_icon_t);
typeattribute {{id_underscore}}_icon_t {{id_underscore}}_domain;

type {{id_underscore}}_data_t;
files_type({{id_underscore}}_data_t);
typeattribute {{id_underscore}}_data_t {{id_underscore}}_domain;

type {{id_underscore}}_http_t;
files_type({{id_underscore}}_http_t);
typeattribute {{id_underscore}}_http_t {{id_underscore}}_domain;

##########
# Policy #
##########

init_dbus_chat({{id_underscore}}_t);
kernel_dgram_send({{id_underscore}}_t);
fs_getattr_xattr_fs({{id_underscore}}_t);
init_stream_connect({{id_underscore}}_t);
init_rw_stream_sockets({{id_underscore}}_t);
kernel_dontaudit_read_system_state({{id_underscore}}_t);

allow {{id_underscore}}_t self:process { setpgid };

# Read conf/bin/data/http/lib

read_{{id_underscore}}_domain({{id_underscore}}_t);

# Binding exec and load own files

allow {{id_underscore}}_t {{id_underscore}}_exec_t:file { execute_no_trans };
allow {{id_underscore}}_t {{id_underscore}}_lib_t:file mmap_exec_file_perms;

# Create tcp socket and use port > 1024

corenet_tcp_bind_generic_node({{id_underscore}}_t);
corenet_tcp_bind_all_unreserved_ports({{id_underscore}}_t);
allow {{id_underscore}}_t self:tcp_socket create_stream_socket_perms;
allow {{id_underscore}}_t self:unix_dgram_socket create_stream_socket_perms;

# Manage redpesk user home files
# Possible improvement with mcs (at this time isolation is preserved with DAC)

redpesk_user_manage_home_files({{id_underscore}}_t);

# Connect other binding

sysnet_dns_name_resolve({{id_underscore}}_t);
corenet_tcp_connect_unreserved_ports({{id_underscore}}_t);
allow {{id_underscore}}_t self:netlink_route_socket { create_socket_perms nlmsg_read nlmsg_write };

# Read and mmap redpesk_public files

read_redpesk_public({{id_underscore}}_t);
mmap_redpesk_public({{id_underscore}}_t);


# Read redpesk_platform, redpesk_scope_platform and redpesk_user

read_redpesk_scope_platform({{id_underscore}}_t);
read_redpesk_platform_domain({{id_underscore}}_t);
read_redpesk_user_domain({{id_underscore}}_t);

# Write on redpesk sockets

write_redpesk_socket({{id_underscore}}_t);

# manage /var/scope-platform
IF_PERM(:partner:scope-platform)
manage_redpesk_scope_platform({{id_underscore}}_t);
ENDIF

# create and write on can socket
IF_PERM(:partner:create-can-socket)
allow {{id_underscore}}_t self:can_socket { create_socket_perms };
kernel_request_load_module({{id_underscore}}_t); # Load can module in kernel
ENDIF

# Allow read binding afbtest
IF_PERM(:partner:read-afbtest)
read_afbtest_domain({{id_underscore}}_t);
ENDIF

# Allow execute shell and bin
IF_PERM(:partner:execute-shell)
auth_read_passwd({{id_underscore}}_t);
corecmd_exec_bin({{id_underscore}}_t);
corecmd_exec_shell({{id_underscore}}_t);
ENDIF

# Allow manage files in /tmp
IF_PERM(:partner:manage-tmp)
manage_dirs_pattern({{id_underscore}}_t, tmp_t, tmp_t);
manage_files_pattern({{id_underscore}}_t, tmp_t, tmp_t);
manage_lnk_files_pattern({{id_underscore}}_t, tmp_t, tmp_t);
manage_fifo_files_pattern({{id_underscore}}_t, tmp_t, tmp_t);
manage_sock_files_pattern({{id_underscore}}_t, tmp_t, tmp_t);
ENDIF

IF_PERM(:partner:manage-user-shared)
manage_redpesk_user_shared({{id_underscore}}_t);
ENDIF
